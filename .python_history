from cmsapp.models import CustomUser
for user in CustomUser.objects.all():
    if not user.password.startswith('bcrypt'):
        user.set_password(user.password)  # Това ще ги преизчисли с новия метод
        user.save()
from cmsapp.models import CustomUser
user = CustomUser.objects.get(username="твоя_потребител")
from cmsapp.models import CustomUser
for user in CustomUser.objects.all():
    if not user.password.startswith('bcrypt'):
        user.set_password(user.password)  # Това ще ги преизчисли с новия метод
        user.save()
from cmsapp.models import CustomUser
user = CustomUser.objects.get(username="твоя_потребител")
print(user.password)  # Очакваният резултат: bcrypt$... (ако работи)
>>> from cmsapp.models import CustomUser
>>>
>>> user = CustomUser.objects.get(username="твоя_потребител")
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/var/www/karavelov/stc/env_site/lib/python3.9/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/var/www/karavelov/stc/env_site/lib/python3.9/site-packages/django/db/models/query.py", line 637, in get
    raise self.model.DoesNotExist(
cmsapp.models.CustomUser.DoesNotExist: CustomUser matching query does not exist.
>>> print(user.password)  # Очакваният резултат: bcrypt$... (ако работи)
pbkdf2_sha256$600000$50ppDXL2WYjEwx3VFgOXBC$lpt+4aIdDyF6uITc5oXW2SjrpvGaqGqH202q4pZTGuA=
>>> from cmsapp.models import CustomUser
>>>
>>> user = CustomUser.objects.get(username="твоя_потребител")
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/var/www/karavelov/stc/env_site/lib/python3.9/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/var/www/karavelov/stc/env_site/lib/python3.9/site-packages/django/db/models/query.py", line 637, in get
    raise self.model.DoesNotExist(
cmsapp.models.CustomUser.DoesNotExist: CustomUser matching query does not exist.
>>> print(user.password)  # Очакваният резултат: bcrypt$... (ако работи)
pbkdf2_sha256$600000$50ppDXL2WYjEwx3VFgOXBC$lpt+4aIdDyF6uITc5oXW2SjrpvGaqGqH202q4pZTGuA=
>>> from cmsapp.models import CustomUser
>>>
>>> user = CustomUser.objects.get(username="твоя_потребител")
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/var/www/karavelov/stc/env_site/lib/python3.9/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/var/www/karavelov/stc/env_site/lib/python3.9/site-packages/django/db/models/query.py", line 637, in get
    raise self.model.DoesNotExist(
cmsapp.models.CustomUser.DoesNotExist: CustomUser matching query does not exist.
>>> print(user.password)  # Очакваният резултат: bcrypt$... (ако работи)
pbkdf2_sha256$600000$50ppDXL2WYjEwx3VFgOXBC$lpt+4aIdDyF6uITc5oXW2SjrpvGaqGqH202q4pZTGuA=
from cmsapp.models import CustomUser
users = CustomUser.objects.all()
print(users)  # Ще покаже всички налични потребители
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',  # ✅ bcrypt - основен алгоритъм
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',        # ✅ резервен метод (ако bcrypt не работи)
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',  
from django.contrib.auth.hashers import make_password
from cmsapp.models import CustomUser
for user in CustomUser.objects.all():
    if not user.password.startswith('bcrypt$'):  # Ако вече е bcrypt, го пропускаме
        user.password = make_password(user.password)  # Пре-хешира старата парола с bcrypt
        user.save()
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',  # ✅ bcrypt - основен алгоритъм
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',        # ✅ резервен метод (ако bcrypt не работи)
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',  
]
from django.contrib.auth.hashers import make_password, identify_hasher
from cmsapp.models import CustomUser
users_updated = 0
for user in CustomUser.objects.all():
    if not user.password.startswith('bcrypt$'):  # Проверяваме дали паролата е вече bcrypt
        try:
            hasher = identify_hasher(user.password)  # Проверяваме дали паролата е валидна
            user.password = make_password(user.password)  # Пре-хеширане с bcrypt
            user.save()
            users_updated += 1
        except Exception as e:
            print(f"Грешка при обновяване на {user.username}: {e}")
print(f"✅ Обновени {users_updated} пароли до bcrypt!")
from cmsapp.models import CustomUser
for user in CustomUser.objects.all():
    print(f"{user.username}: {user.password}")
from django.contrib.auth.hashers import make_password
from cmsapp.models import CustomUser
users_updated = 0
for user in CustomUser.objects.all():
    if user.password.startswith('scrypt$'):  # Ако паролата е със SCrypt
        user.password = make_password("123")  # Променяме паролата на временно нещо
        user.save()
        users_updated += 1
print(f"✅ Обновени {users_updated} пароли до bcrypt!")
exit
quit
history
python manage.py shell
from django.contrib.auth.hashers import make_password
from cmsapp.models import CustomUser
new_password = "123"  # Паролата, която ще се зададе на всички потребители
hashed_password = make_password(new_password)  # Генериране на bcrypt хеш
users_updated = 0
for user in CustomUser.objects.all():
    user.password = hashed_password  # Задаване на новата парола
    user.save()
    users_updated += 1
python manage.py shell
from django.contrib.auth.hashers import make_password
print(make_password("123"))
MariaDB [stc]> update cmsapp_customuser set password='bcrypt_sha256$$2b$12$9OVuYGiWwgbn.9I05jj2iukavgw9kyRdi.8UtOqHkSqV1J6O1aMBK'
MariaDB [stc]> from django.contrib.auth.hashers import make_password
    -> print(make_password("123", hasher='bcrypt_sha256'))
    ->
MariaDB [stc]> from django.contrib.auth.hashers import make_password
    -> print(make_password("123", hasher='bcrypt_sha256'))
    ->
MariaDB [stc]> from django.contrib.auth.hashers import make_password
    -> print(make_password("123", hasher='bcrypt_sha256'))
    ->
from django.contrib.auth.hashers import make_password
print(make_password("123", hasher='bcrypt_sha256'))
from django.contrib.auth.hashers import check_password
hashed_password = "bcrypt_sha256$$2b$12$9OVuYGiWwgbn.9I05jj2iukavgw9kyRdi.8UtOqHkSqV1J6O1aMBK"
print(check_password("123", hashed_password))
hashed_password = "bcrypt_sha256$$2b$12$tNrk1My0Q6pMifDGncc54uiiMG15G.n2hQp.q6a4ppuQUYZuX3E4S"
print(check_password("123", hashed_password))
from django.contrib.auth import authenticate
user = authenticate(username="admin", password="123")
print(user)
хеша е сетнат на всякъде и в django shell всичко е наред но пак не може да влезе.
from django.contrib.auth.hashers import check_password
from django.contrib.auth import get_user_model
User = get_user_model()
user = User.objects.get(username="admin")  # Замени "admin" с реалното име
print(check_password("123", user.password))  # Очакван резултат: True
from django.contrib.auth import get_user_model
from django.contrib.auth.hashers import make_password
User = get_user_model()
hashed_password = make_password("123")
User.objects.all().update(password=hashed_password)
print("✅ Всички потребители имат една и съща bcrypt парола!")
from django.contrib.auth import get_user_model
from django.contrib.auth.backends import ModelBackend
class EmailBackEnd(ModelBackend):
    def authenticate(self, username=None, password=None, **kwargs):
        UserModel = get_user_model()
        try:
            user = UserModel.objects.get(email=username)
        except UserModel.DoesNotExist:
            return None
        else:
            if user.check_password(password):
                return user
        return None
python manage.py shell
from django.contrib.auth.hashers import check_password
from cmsapp.models import CustomUser
user = CustomUser.objects.get(email="admin@example.com")
print(check_password("123", user.password))  # Трябва да върне True
from django.contrib.auth.hashers import check_password
from cmsapp.models import CustomUser
user = CustomUser.objects.get(email="admin@gmail.com")
print(check_password("123", user.password))  # Трябва да върне True
from django.contrib.auth.hashers import check_password
from cmsapp.models import CustomUser
user = CustomUser.objects.get(email="admin@example.com")
user = CustomUser.objects.get(email="admin@gmail.com")
from cmsapp.models import CustomUser
user = CustomUser.objects.filter(email__iexact="admin@example.com").first()
user = CustomUser.objects.filter(email__iexact="admin@gmail.com").first()
print(user)
from django.contrib.auth.hashers import make_password
print(make_password("123"))  # Очакван изход: bcrypt хеш
print(make_password("123456"))  # Очакван изход: bcrypt хеш
from cmsapp.models import VehiclesOwners
from cmsapp.models import Vehicles_Owners
from cmsapp.models import Vehicles_Owner
from cmsapp.models import VehiclesOwners
яуит
from django.contrib.auth import get_user_model
User = get_user_model()
for user in User.objects.all():
    user.set_password(user.password)  # Генерира нов bcrypt хеш
    user.save()
from django.contrib.auth import authenticate
user = authenticate(username="test@example.com", password="123456")
user = authenticate(username="admin", password="123456")
import bcrypt
password = "123456".encode("utf-8")
hashed_password = bcrypt.hashpw(password, bcrypt.gensalt()).decode()
print(hashed_password)
from django.contrib.auth import authenticate
user = authenticate(username="admin", password="123456")
print(hashed_password)
user = authenticate(username="user@example.com", password="123456")
print(hashed_password)
print(user) 
user = authenticate(username="admin", password="123456")
print(user) 
user = authenticate(username="admin", password="123456")
print(user) 
from django.contrib.auth import authenticate
user = authenticate(username="admin", password="123456")
print(user) 
import bcrypt
password = "123456".encode("utf-8")
hashed_password = bcrypt.hashpw(password, bcrypt.gensalt()).decode()
print(hashed_password)
version()
ver()
get ver
get version
from django.contrib.auth import authenticate
user = authenticate(username="admin@example.com", password="123456")
print(user)  # Ако е None, значи паролата или името е грешно
user = authenticate(username="admin", password="123456")
print(user)  # Ако е None, значи паролата или името е грешно
user = authenticate(username="admin", password="123456")
print(user)  # Ако е None, значи паролата или името е грешно
from django.contrib.auth import get_user_model
User = get_user_model()
user = User.objects.filter(email="admin@example.com").first()
if user:
    print(f"🔍 Намерен потребител: {user.email}")
    print(f"🔑 Записана парола: {user.password}")
else:
    print("❌ Потребителят не съществува!")
from django.contrib.auth import get_user_model
User = get_user_model()
user = User.objects.filter(email="stc@karavelov.com").first()
if user:
    print(f"🔍 Намерен потребител: {user.email}")
    print(f"🔑 Записана парола: {user.password}")
else:
    print("❌ Потребителят не съществува!")
from django.contrib.auth import get_user_model
User = get_user_model()
user = User.objects.filter(email="stc@karavelov.com").first()
if user:
    print(f"🔍 Намерен потребител: {user.email}")
    print(f"🔑 Записана парола: {user.password}")
else:
    print("❌ Потребителят не съществува!")
import bcrypt
password = "123456".encode("utf-8")
hashed_password = bcrypt.hashpw(password, bcrypt.gensalt()).decode()
print(hashed_password)  # Копирай този резултат
from django.contrib.auth import authenticate
user = authenticate(username="stc@karavelov.com", password="123456")
print(user)  # Очакван резултат: user обект или None
from cmsapp.EmailBackEnd import EmailBackEnd
print(EmailBackEnd)
from django.contrib.auth import authenticate
user = authenticate(username="stc@karavelov.com", password="123456")
print(user)  # Очакван резултат: User обект или None
from django.conf import settings
print(settings.AUTHENTICATION_BACKENDS)
from django.conf import settings
print(settings.AUTHENTICATION_BACKENDS)
from django.conf import settings
print(settings.AUTHENTICATION_BACKENDS)
from django.conf import settings
print(settings.AUTHENTICATION_BACKENDS)
from django.conf import settings
print(settings.AUTHENTICATION_BACKENDS)
from django.conf import settings
print(settings.AUTHENTICATION_BACKENDS)
from django.conf import settings
print(settings.AUTHENTICATION_BACKENDS)
from django.conf import settings
print(settings.AUTHENTICATION_BACKENDS)
import django
print(django.settings_module)
import django
print(django.settings_module)
import django
print(django.settings_module)
quit
import django
print(django.settings_module)
import django
print(django.settings_module)
from django.conf import settings
print(settings.SETTINGS_MODULE)
print(settings.AUTHENTICATION_BACKENDS)  # Това е най-важното!
from django.contrib.auth import authenticate
user = authenticate(username="stc@karavelov.com", password="123456")
print(user)  # Очакван резултат: <CustomUser: stc@karavelov.com> или None
user = authenticate(username="stc@karavelov.com", password="123456")
from django.contrib.auth import authenticate
user = authenticate(username="stc@karavelov.com", password="123456")
print(user)  # Очакван резултат: <CustomUser: stc@karavelov.com> или None
user = authenticate(username="stc@karavelov.com", password="123456")
import bcrypt
password = "123456".encode("utf-8")
user = User.objects.get(email="stc@karavelov.com")
stored_password = user.password
if stored_password.startswith("bcrypt$$"):
    stored_password = stored_password.replace("bcrypt$$", "")
print(f"🔑 Съхранен хеш: {stored_password}")
if bcrypt.checkpw(password, stored_password.encode("utf-8")):
    print("✅ Паролата е правилна!")
else:
    print("❌ Грешна парола!")
import bcrypt
password = "123456".encode("utf-8")
user = User.objects.get(email="stc@karavelov.com")
stored_password = user.password
if stored_password.startswith("bcrypt$$"):
    stored_password = stored_password.replace("bcrypt$$", "")
print(f"🔑 Съхранен хеш: {stored_password}")
if bcrypt.checkpw(password, stored_password.encode("utf-8")):
    print("✅ Паролата е правилна!")
else:
    print("❌ Грешна парола!")
hashed_password = bcrypt.hashpw("123456".encode("utf-8"), bcrypt.gensalt()).decode()
print(hashed_password)
import bcrypt
password = "123456".encode("utf-8")
stored_password = "2b$12$4cdSZxQI1z9tIbBijsN6b.UTWgJUhzPreJ9I/Y1ZbV0zZaIcrtcBG"
if bcrypt.checkpw(password, stored_password.encode("utf-8")):
    print("✅ Паролата е правилна!")
else:
    print("❌ Грешна парола!")
hashed_password = bcrypt.hashpw("123456".encode("utf-8"), bcrypt.gensalt()).decode()
print(hashed_password)  # Копирай резултата
UPDATE cmsapp_customuser 
SET password = '$2b$12$xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
WHERE email = 'stc@karavelov.com';
hashed_password = bcrypt.hashpw("123456".encode("utf-8"), bcrypt.gensalt()).decode()
print(hashed_password)  # Копирай резултата
user = authenticate(username="stc@karavelov.com", password="123456")
from django.contrib.auth import get_user_model
User = get_user_model()
user = User.objects.get(email="stc@karavelov.com")
print(f"👤 Потребител: {user.email}")
print(f"🔍 user_type: {user.user_type}")
from django.contrib.auth import get_user_model
User = get_user_model()
user = User.objects.get(email="stc@karavelov.com")
print(f"👤 Потребител: {user.email}")
print(f"🔍 user_type: {user.user_type}")
print(f"🛠 Тип на user_type: {type(user.user_type)}")
user.user_type = int(user.user_type)  # Преобразуваме го в число
user.save()
print(f"✅ Поправен user_type: {user.user_type}, Тип: {type(user.user_type)}")
user.user_type = int(user.user_type)  # Преобразуваме го в число
user.save()
print(f"✅ Поправен user_type: {user.user_type}, Тип: {type(user.user_type)}")
user.user_type = 1  # Или 2, или 3 - в зависимост от ролята
user.save()
print(f"✅ Поправен user_type: {user.user_type}")
from django.contrib.auth import get_user_model
import bcrypt
User = get_user_model()
user = User.objects.get(email="stcuser@karavelov.com")
print(f"👤 Потребител: {user.email}")
print(f"🔑 Запазен хеш: {user.password}")
# Проверяваме дали паролата `123456` съвпада
password_attempt = "123456".encode("utf-8")
hashed_password = user.password.encode("utf-8")
if bcrypt.checkpw(password_attempt, hashed_password):
    print("✅ `123456` е валидната парола!")
else:
    print("❌ `123456` НЕ съвпада с хеша!")
user = authenticate(username="stc@karavelov.com", password="123456")
user = authenticate(username="i.ilieva@karavelov.com", password="123456")
user = authenticate(username="i.ilieva@karavelov.com", password="123")
import bcrypt
from django.contrib.auth import get_user_model
User = get_user_model()
user = User.objects.get(email="i.ilieva@karavelov.com")
print(f"👤 Потребител: {user.email}")
print(f"🔑 Запазен хеш: {user.password}")
password_attempt = "123".encode("utf-8")  # Въвежданата парола
hashed_password = user.password.encode("utf-8")  # Хешът в базата
if bcrypt.checkpw(password_attempt, hashed_password):
    print("✅ Паролата е правилна!")
else:
    print("❌ Грешна парола!")
user = authenticate(username="m.petrov1@karavelov.com", password="123")
user = authenticate(username="m.petrov1@karavelov.com", password="123456")
import bcrypt
from django.contrib.auth import get_user_model
User = get_user_model()
user = User.objects.get(email="m.petrov1@karavelov.com")
password_attempt = "123".encode("utf-8")  # Паролата, която проверяваме
hashed_password = user.password.encode("utf-8")  # Хешът от базата
print(f"🔑 Запазен хеш: {user.password}")
if bcrypt.checkpw(password_attempt, hashed_password):
    print("✅ Паролата съвпада!")
else:
    print("❌ Грешна парола!")
import bcrypt
from django.contrib.auth import get_user_model
User = get_user_model()
user = User.objects.get(email="m.petrov1@karavelov.com")
new_password = "123"  # 👉 Временна нова парола
hashed_password = bcrypt.hashpw(new_password.encode("utf-8"), bcrypt.gensalt()).decode("utf-8")
user.password = hashed_password
user.save()
print(f"✅ Поправена парола за {user.email}")
import bcrypt
from django.contrib.auth import get_user_model
User = get_user_model()
user = User.objects.get(email="m.petrov1@karavelov.com")
password_attempt = "123".encode("utf-8")  # Паролата, която проверяваме
hashed_password = user.password.encode("utf-8")  # Хешът от базата
print(f"🔑 Запазен хеш: {user.password}")
if bcrypt.checkpw(password_attempt, hashed_password):
    print("✅ Паролата съвпада!")
else:
    print("❌ Грешна парола!")
import bcrypt
from django.contrib.auth import get_user_model
User = get_user_model()
for user in User.objects.all():
    if user.password.startswith("$2b$"):  # Само тези, които са с bcrypt хеш
        new_password = "123456"  # 👉 Задаваме временна парола
        user.set_password(new_password)  # ✅ Използваме Django хеширането
        user.save()
        print(f"✅ Поправена парола за {user.email}")
for user in User.objects.all():
from django.contrib.auth import get_user_model
User = get_user_model()
user = User.objects.get(email="m.petrov1@karavelov.com")  # Тествай с твоя потребител
print(user.check_password("123456"))  # Очакваме True, ако паролата е правилна
import bcrypt
hashed_password = user.password.encode("utf-8")
entered_password = "123456".encode("utf-8")
if bcrypt.checkpw(entered_password, hashed_password):
    print("✅ Паролата е правилна!")
else:
    print("❌ Грешна парола!")
from django.contrib.auth import authenticate
user = authenticate(username="m.petrov1@karavelov.com", password="123456")
print(user)  # Очакваме да не е None!
user = authenticate(username="s@karavelov.com", password="123")
quit
user = authenticate(username="s@karavelov.com", password="123")
from django.contrib.auth import authenticate
user = authenticate(username="s@karavelov.com", password="123")
user = authenticate(username="e@karavelov.com", password="123")
user = authenticate(username="stc@karavelov.com", password="123")
user = authenticate(username="stc@karavelov.com", password="123456")
user = authenticate(username="stcuser@karavelov.com", password="123")
user = authenticate(username="stcuser@karavelov.com", password="123456")
user = authenticate(username="b@karavelov.com", password="123456")
quit
user = authenticate(username="s@karavelov.com", password="123")
 from django.contrib.auth import authenticate
from django.contrib.auth import authenticate
user = authenticate(username="s@karavelov.com", password="123")
user = authenticate(username="b@karavelov.com", password="123")
user = authenticate(username="b@karavelov.com", password="123456")
user = authenticate(username="j@karavelov.com", password="123")
user = authenticate(username="j@karavelov.com", password="123456")
user = authenticate(username="j@karavelov.com", password="123")
user = authenticate(username="i1@karavelov.com", password="123")
user = authenticate(username="mpetrov@karavelov.com", password="123")
user = authenticate(username="mpetrov1@karavelov.com", password="123")
user = authenticate(username="m.petrov1@karavelov.com", password="123")
user = authenticate(username="m.petrov1@karavelov.com", password="123456")
user = authenticate(username="m.petrov1@karavelov.com", password="123")
user = authenticate(username="a1@karavelov.com", password="123")
user = authenticate(username="a2@karavelov.com", password="123")
user = authenticate(username="a3@karavelov.com", password="123")
user = authenticate(username="a2@karavelov.com", password="123")
user = authenticate(username="a3@karavelov.com", password="123")
user = authenticate(username="a4@karavelov.com", password="123")
user = authenticate(username="a5@karavelov.com", password="123")
