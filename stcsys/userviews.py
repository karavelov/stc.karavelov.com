from django.shortcuts import render,redirect,HttpResponse
from django.contrib.auth.decorators import login_required

from cmsapp.models import CustomUser,UserReg,Category,Subcategory,Region,Type_Traffic_Lights,Complaints,ComplaintRemark,City,Street
from django.contrib import messages
from django.http import JsonResponse
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
import random
from django.core.files.images import get_image_dimensions
from django.conf import settings





@login_required(login_url='/')

def USERHOME(request):
    user_admin = request.user
    user_reg = UserReg.objects.get(admin=user_admin)
    complaints_count = Complaints.objects.filter(userregid=user_reg).count
    newcom_count = Complaints.objects.filter(status='0',userregid=user_reg).count()
    ipcom_count = Complaints.objects.filter(status='Inprocess',userregid=user_reg).count()
    closed_count = Complaints.objects.filter(status='Closed',userregid=user_reg).count()
    context = {
    'complaints_count':complaints_count,
    'newcom_count':newcom_count,
    'ipcom_count':ipcom_count,
    'closed_count':closed_count,        
    }
    return render(request,'user/userdashboard.html',context)







def USERSIGNUP(request):
    if request.method == "POST":
        #print("üîπ –§–æ—Ä–º–∞ –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω–∞!")  # –î–µ–±—ä–≥–≤–∞–Ω–µ

        pic = request.FILES.get('pic', None)  # –ù–ï –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ
        first_name = request.POST.get('first_name')
        last_name = request.POST.get('last_name')
        username = request.POST.get('username')  # –°–∫—Ä–∏—Ç–æ –ø–æ–ª–µ
        email = request.POST.get('email')
        mobno = request.POST.get('mobno')
        password = request.POST.get('password')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥—É–±–ª–∏—Ä–∞–Ω–µ –Ω–∞ –∏–º–µ–π–ª
        if CustomUser.objects.filter(email=email).exists():
            messages.warning(request, '–¢–æ–∑–∏ –∏–º–µ–π–ª –≤–µ—á–µ –µ –∑–∞–µ—Ç!')
            return redirect('usersignup')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥—É–±–ª–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ
        if CustomUser.objects.filter(username=username).exists():
            messages.warning(request, '–¢–æ–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞!')
            return redirect('usersignup')

        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
        user = CustomUser(
            first_name=first_name,
            last_name=last_name,
            username=username,
            email=email,
            user_type=2,
            profile_pic=pic if pic else None,  # –ê–∫–æ –Ω—è–º–∞ —Å–Ω–∏–º–∫–∞, –æ—Å—Ç–∞–≤–∞ –ø—Ä–∞–∑–Ω–æ
        )
        user.set_password(password)
        user.save()

        # –°–≤—ä—Ä–∑–≤–∞–Ω–µ –Ω–∞ UserReg –º–æ–¥–µ–ª–∞
        comuser = UserReg(admin=user, mobilenumber=mobno)
        comuser.save()

        messages.success(request, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞ –µ —É—Å–ø–µ—à–Ω–∞! –ú–æ–ª—è, –≤–ª–µ–∑—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª–∞ —Å–∏.')
        return redirect('login')

    return render(request, 'user/user_reg.html')











@login_required(login_url='/')
def get_subcat(request):
    if request.method == 'GET':
        c_id = request.GET.get('c_id')
        # print(f"üîç –ü–æ–ª—É—á–µ–Ω–æ cat_id: {c_id}")  # –õ–æ–≥–≤–∞–º–µ –∑–∞ –¥–µ–±—ä–≥–≤–∞–Ω–µ
        # –§–∏–ª—Ç—Ä–∏—Ä–∞–º–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏—Ç–µ –ø–æ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        subcat = Subcategory.objects.filter(cat_id=c_id)
        subcat_options = '<option value="">–ò–∑–±–µ—Ä–µ—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è</option>'
        for subcategory in subcat:
            subcat_options += f'<option value="{subcategory.id}">{subcategory.subcatname}</option>'
        
        return JsonResponse({'subcat_options': subcat_options})



@login_required(login_url='/')
def COMPLAINTHISTORY(request):
    userreg = request.user.userreg
    complaint_list = Complaints.objects.filter(userregid=userreg)
    paginator = Paginator(complaint_list, 10)  # Show 10 complaints per page

    page_number = request.GET.get('page')
    try:
        complaints = paginator.page(page_number)
    except PageNotAnInteger:
        # If page is not an integer, deliver first page.
        complaints = paginator.page(1)
    except EmptyPage:
        # If page is out of range (e.g. 9999), deliver last page of results.
        complaints = paginator.page(paginator.num_pages)

    context = {'complaints': complaints}
    return render(request, 'user/complaint-history.html', context)

@login_required(login_url='/')
def COMPLAINTHISTORYDETAILS(request,id):
    complaints = Complaints.objects.get(id=id)
    complaintsremarks = ComplaintRemark.objects.filter(comp_id_id=id)

    context = {
         'complaints':complaints,
         'complaintsremarks':complaintsremarks,
    }
    return render(request,'user/complaint-details.html',context)





@login_required(login_url='/')
def REGCOMPLAINT(request):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–∏–≥–Ω–∞–ª"""
    if request.method == "POST":
        cat_id = request.POST.get("cat_id")
        subcategory_id = request.POST.get("subcategory_id")
        city_id = request.POST.get("city_id")
        street_id = request.POST.get("street_id")
        complaindetails = request.POST.get("complaindetails")
        compfile = request.FILES.get("compfile")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –≤—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞ —Å–∞ –ø–æ–ø—ä–ª–Ω–µ–Ω–∏
        if not cat_id or not subcategory_id or not city_id or not street_id:
            messages.error(request, "–í—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞ —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏!")
            return redirect("regcomplaint")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∏–∑–±—Ä–∞–Ω–∏—è—Ç –≥—Ä–∞–¥ –∏ —É–ª–∏—Ü–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—Ç –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
        try:
            city = City.objects.get(id=city_id)
            street = Street.objects.get(id=street_id, city_id=city)  # üëà –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —É–ª–∏—Ü–∞—Ç–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏ –Ω–∞ –≥—Ä–∞–¥–∞
        except City.DoesNotExist:
            messages.error(request, "–ù–µ–≤–∞–ª–∏–¥–µ–Ω –≥—Ä–∞–¥!")
            return redirect("regcomplaint")
        except Street.DoesNotExist:
            messages.error(request, "–ù–µ–≤–∞–ª–∏–¥–Ω–∞ —É–ª–∏—Ü–∞ –∑–∞ —Ç–æ–∑–∏ –≥—Ä–∞–¥!")
            return redirect("regcomplaint")

        # –ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
        complaint = Complaints(
            userregid=request.user.userreg,
            cat_id_id=cat_id,
            subcategory_id_id=subcategory_id,
 city=City.objects.get(id=city_id),  # ‚úÖ –ü—Ä–∞–≤–∏–ª–Ω–æ –ø–æ–¥–∞–≤–∞–Ω–µ –Ω–∞ –≥—Ä–∞–¥
    street=Street.objects.get(id=street_id),  # ‚úÖ –ü—Ä–∞–≤–∏–ª–Ω–æ –ø–æ–¥–∞–≤–∞–Ω–µ –Ω–∞ —É–ª–∏—Ü–∞
            complaindetails=complaindetails,
            compfile=compfile,
        )
        complaint.save()

        messages.success(request, "–°–∏–≥–Ω–∞–ª—ä—Ç –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return redirect("user_home")

    # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≥—Ä–∞–¥–æ–≤–µ –∑–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç–∞
    categories = Category.objects.all()
    cities = City.objects.all()
    return render(request, "user/register-complaint.html", {"categories": categories, "cities": cities})


def get_streets(request):
    """–ó–∞—Ä–µ–∂–¥–∞ —É–ª–∏—Ü–∏—Ç–µ –∑–∞ –∏–∑–±—Ä–∞–Ω–∏—è –≥—Ä–∞–¥"""
    city_id = request.GET.get("city_id")
    if city_id:
        streets = Street.objects.filter(city_id=city_id).values("id", "street_name")
        return JsonResponse({"streets": list(streets)})
    return JsonResponse({"streets": []})


def get_subcategories(request):
    """–ó–∞—Ä–µ–∂–¥–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è"""
    cat_id = request.GET.get("cat_id")
    if cat_id:
        subcategories = Subcategory.objects.filter(cat_id=cat_id).values("id", "subcatname")
        return JsonResponse({"subcategories": list(subcategories)})
    return JsonResponse({"subcategories": []})







@login_required(login_url='/')
def POLICEHOME(request):
    user_admin = request.user
    user_reg = UserReg.objects.get(admin=user_admin)
    
    complaints_count = Complaints.objects.filter(userregid=user_reg).count
    newcom_count = Complaints.objects.filter(status='0', userregid=user_reg).count()
    ipcom_count = Complaints.objects.filter(status='Inprocess', userregid=user_reg).count()
    closed_count = Complaints.objects.filter(status='Closed', userregid=user_reg).count()

    context = {
        'complaints_count': complaints_count,
        'newcom_count': newcom_count,
        'ipcom_count': ipcom_count,
        'closed_count': closed_count,        
    }
    return render(request, 'police/policedashboard.html', context)





from cmsapp.models import CustomUser  # –∞–∫–æ –∏–∑–ø–æ–ª–∑–≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω –º–æ–¥–µ–ª
from django.db.models import Q

@login_required(login_url='/')
def police_search(request):
    query = request.GET.get('query', '')
    search_results = []

    if query:
        # –¢—ä—Ä—Å–∏–º –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–µ–Ω –Ω–æ–º–µ—Ä –∏–ª–∏ –ï–ì–ù
        search_results = CustomUser.objects.filter(
            Q(registration_number__icontains=query) | Q(egn__icontains=query)
        )
        
    return render(request, 'admin/police_search.html', {
        'query': query,
        'search_results': search_results
    })
