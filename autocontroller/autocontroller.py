import subprocess
import time
import pymysql
import paho.mqtt.client as mqtt
import threading

# MQTT –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
broker = "109.104.195.26"
username = "trafficcontrol"
password = "parolata1"

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –¥–∞—Ç–∞–±–∞–∑–∞—Ç–∞
DB_HOST = "localhost"
DB_USER = "stc"
DB_PASS = "stc_pass"
DB_NAME = "stc"
normalmode = True

numbers = set()
numbersop = set()
numbersaf = set()
seconds = 0

def get_db_connection():
    return pymysql.connect(host=DB_HOST, user=DB_USER, password=DB_PASS, database=DB_NAME, charset='utf8mb4', cursorclass=pymysql.cursors.DictCursor)

def setup_mqtt():
    client = mqtt.Client()
    client.username_pw_set(username, password)
    client.on_message = on_message
    client.connect(broker, 1883, 60)
    topics = ["numbers/detect2", "numbers/detect3", "numbers/detect6"]
    for topic in topics:
        client.subscribe(topic)
        print(f"üì° –ó–∞—Å–∏—á–∞–Ω–µ –Ω–∞ –Ω–æ–º–µ—Ä–∞ '{topic}'")
    return client

def on_message(client, userdata, message):
    global numbers
    global numbersop
    global numbersaf
    received_number = message.payload.decode().strip()
    received_topic = message.topic
    if received_topic == "numbers/detect2":
        if received_number not in numbersop:
            numbersop.add(received_number)
            print(f"üöó –ó–∞—Å–µ—á–µ–Ω –Ω–æ–º–µ—Ä: {received_number} –æ—Ç —Ç–æ–ø–∏–∫: {received_topic}")
            global seconds
            seconds+=6
            print(seconds)
            print(numbersop)
            conn = get_db_connection()
            try:
                with conn.cursor() as cursor:
                    cursor.execute("""
                        SELECT valid_vignette, valid_insurance	 
                        FROM cmsapp_vehicles 
                        WHERE A=%s
                    """, (received_number.strip(),))
                    result = cursor.fetchone()
                    
                    if result:
                        if result['valid_vignette'] == 0:
                            print("–ö–æ–ª–∞—Ç–∞ –Ω—è–º–∞ –≤–∏–Ω–µ—Ç–∫–∞, –∏–∑–ø—Ä–∞—â–∞ —Å–µ —Å–∏–≥–Ω–∞–ª –¥–æ –Ω–∞–π-–±–ª–∏–∑–∫–∏—è –ø–∞—Ç—Ä—É–ª.")
                        if result['valid_insurance'] == 0:
                            print("–ö–æ–ª–∞—Ç–∞ –Ω—è–º–∞ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞, –∏–∑–ø—Ä–∞—â–∞ —Å–µ —Å–∏–≥–Ω–∞–ª –¥–æ –Ω–∞–π-–±–ª–∏–∑–∫–∏—è –ø–∞—Ç—Ä—É–ª.")

                    else:
                        print("‚ÑπÔ∏è –ù—è–º–∞ –¥–∞–Ω–Ω–∏ –∑–∞ —Ç–æ–∑–∏ –Ω–æ–º–µ—Ä –≤ –±–∞–∑–∞—Ç–∞.")
            finally:
                conn.close()
        else:   
            print(f"‚ö†Ô∏è –ù–æ–º–µ—Ä—ä—Ç {received_number} –≤–µ—á–µ –µ –∑–∞—Å–µ—á–µ–Ω.")
    elif received_topic == "numbers/detect3":
        if received_number not in numbers:
            numbers.add(received_number)
            print(f"üöó –ó–∞—Å–µ—á–µ–Ω –Ω–æ–º–µ—Ä: {received_number} –æ—Ç —Ç–æ–ø–∏–∫: {received_topic}")
            print(numbers)
            conn = get_db_connection()
            try:
                with conn.cursor() as cursor:
                    cursor.execute("""
                        SELECT valid_vignette, valid_insurance	 
                        FROM cmsapp_vehicles 
                        WHERE A=%s
                    """, (received_number.strip(),))
                    result = cursor.fetchone()
                    
                    if result:
                        if result['valid_vignette'] == 0:
                            print("–ö–æ–ª–∞—Ç–∞ –Ω—è–º–∞ –≤–∏–Ω–µ—Ç–∫–∞, –∏–∑–ø—Ä–∞—â–∞ —Å–µ —Å–∏–≥–Ω–∞–ª –¥–æ –Ω–∞–π-–±–ª–∏–∑–∫–∏—è –ø–∞—Ç—Ä—É–ª.")
                        if result['valid_insurance'] == 0:
                            print("–ö–æ–ª–∞—Ç–∞ –Ω—è–º–∞ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞, –∏–∑–ø—Ä–∞—â–∞ —Å–µ —Å–∏–≥–Ω–∞–ª –¥–æ –Ω–∞–π-–±–ª–∏–∑–∫–∏—è –ø–∞—Ç—Ä—É–ª.")

                    else:
                        print("‚ÑπÔ∏è –ù—è–º–∞ –¥–∞–Ω–Ω–∏ –∑–∞ —Ç–æ–∑–∏ –Ω–æ–º–µ—Ä –≤ –±–∞–∑–∞—Ç–∞.")
            finally:
                conn.close()
        else:   
            print(f"‚ö†Ô∏è –ù–æ–º–µ—Ä—ä—Ç {received_number} –≤–µ—á–µ –µ –∑–∞—Å–µ—á–µ–Ω.")
    elif received_topic == "numbers/detect6":
        if received_number not in numbersaf:
            numbersaf.add(received_number)
            print(f"üöó –ó–∞—Å–µ—á–µ–Ω –Ω–æ–º–µ—Ä: {received_number} –æ—Ç —Ç–æ–ø–∏–∫: {received_topic}")
            print(numbersaf)
            conn = get_db_connection()
            try:
                with conn.cursor() as cursor:
                    cursor.execute("""
                        SELECT valid_vignette, valid_insurance	 
                        FROM cmsapp_vehicles 
                        WHERE A=%s
                    """, (received_number.strip(),))
                    result = cursor.fetchone()
                    
                    if result:
                        if result['valid_vignette'] == 0:
                            print("–ö–æ–ª–∞—Ç–∞ –Ω—è–º–∞ –≤–∏–Ω–µ—Ç–∫–∞, –∏–∑–ø—Ä–∞—â–∞ —Å–µ —Å–∏–≥–Ω–∞–ª –¥–æ –Ω–∞–π-–±–ª–∏–∑–∫–∏—è –ø–∞—Ç—Ä—É–ª.")
                        if result['valid_insurance'] == 0:
                            print("–ö–æ–ª–∞—Ç–∞ –Ω—è–º–∞ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞, –∏–∑–ø—Ä–∞—â–∞ —Å–µ —Å–∏–≥–Ω–∞–ª –¥–æ –Ω–∞–π-–±–ª–∏–∑–∫–∏—è –ø–∞—Ç—Ä—É–ª.")

                    else:
                        print("‚ÑπÔ∏è –ù—è–º–∞ –¥–∞–Ω–Ω–∏ –∑–∞ —Ç–æ–∑–∏ –Ω–æ–º–µ—Ä –≤ –±–∞–∑–∞—Ç–∞.")
            finally:
                conn.close()
        else:   
            print(f"‚ö†Ô∏è –ù–æ–º–µ—Ä—ä—Ç {received_number} –≤–µ—á–µ –µ –∑–∞—Å–µ—á–µ–Ω.")

def execute_commands(commands):
    processes = [subprocess.Popen(cmd, shell=True) for cmd in commands]
    for process in processes:
        process.wait()

# –ò–∑–≤–ª–∏—á–∞ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ —Å–≤–µ—Ç–æ—Ñ–∞—Ä–∏—Ç–µ
conn = get_db_connection()
cursor = conn.cursor()
sqlt = "SELECT * FROM cmsapp_traffic_lights"
cursor.execute(sqlt)
trafficlight = cursor.fetchall()

# MQQT –ö–æ–º–∞–Ω–¥–∏
firsttrafficlights = [
    f"mosquitto_pub -h {broker} -t {row['topic']} -m {'red' if row['topic'] in ['traffic/light2', 'traffic/light3'] else 'green'} -u {username} -P {password}"
    for row in trafficlight
]

secondtrafficlights = [
f"mosquitto_pub -h {broker} -t {row['topic']} -m {'green' if row['topic'] in ['traffic/light2', 'traffic/light3'] else ('bothred' if row['topic'] in ['traffic/light1', 'traffic/light4'] else 'red')} -u {username} -P {password}"
    for row in trafficlight
]

thirdtrafficlights = [
    f"mosquitto_pub -h {broker} -t {row['topic']} -m {'green' if row['topic'] in ['traffic/light2', 'traffic/light3'] else 'red'} -u {username} -P {password}"
    for row in trafficlight
]

# –§—É–Ω–∫—Ü–∏—è –∑–∞ autocontrollera
def traffic_light_loop():
    global seconds
    while True:
        if seconds == 0:
            seconds = 20
            
        execute_commands(firsttrafficlights)
        time.sleep(seconds)
        execute_commands(secondtrafficlights)
        time.sleep(20)
        execute_commands(thirdtrafficlights)
        time.sleep(seconds)


# Loop
if __name__ == "__main__":
    traffic_thread = threading.Thread(target=traffic_light_loop, daemon=True)
    traffic_thread.start()
    client = setup_mqtt()
    client.loop_forever()

cursor.close()
conn.close()
